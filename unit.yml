- name: Workflow Unit work
  hosts: localhost
  #connection: local
  gather_facts: "{{ my_facts | default('no', true) }}"
  vars:
    - to_fail: false
    - tower_base_url: "https://{{ tower_hostname }}/api/v2/"

  tasks:
    - name: Print Job data
      debug:
        msg: |
          Username: {{ tower_user_name }}
          Job ID: {{ tower_job_id }}
          How the Job was started: {{ tower_job_launch_type }}
          Workflow Job Name that launched it: {{ tower_workflow_job_name | default('N/A', true) }}
          Workflow Job ID that launched it: {{ tower_workflow_job_id | default('N/A', true) }}

    - name: Get Workflow Node ID for this Job
      set_fact:
        tower_settings: "{{ lookup('ansible.tower.tower_api', endpoint) }}"
      register: result
      vars:
        endpoint: "workflow_job_nodes/?job_id={{ tower_job_id }}"

    - name: DEBUG workflow
      debug:
        # msg: "{{ result | to_nice_json }}"
        msg: "{{ result.ansible_facts.tower_settings }}"

    - name: Get parent Workflow nodes for this Workflow Node
      set_fact:
        tower_settings: "{{ lookup('ansible.tower.tower_api', endpoint) }}"
      register: parents
      vars:
        endpoint: "workflow_job_nodes/?success_nodes={{ result.ansible_facts.tower_settings.id }}"

    # - name: "Get Workflow node id for this job"
    #   uri:
    #     url: "{{ tower_base_url }}/workflow_job_nodes/?job_id={{ tower_job_id }}"
    #     #validate_certs: "{{ tower_verify_ssl }}"
    #     force_basic_auth: true
    #     user: "{{ tower_username }}"
    #     password: "{{ tower_password }}"
    #   register: result

    # - name: "Get parent workflow nodes for this workflow node"
    #   uri:
    #     url: "{{ tower_base_url }}/workflow_job_nodes/?success_nodes={{ result.json.results[0].id }}"
    #     validate_certs: "{{ tower_verify_ssl }}"
    #     force_basic_auth: true
    #     user: "{{ tower_username }}"
    #     password: "{{ tower_password }}"
    #   register: result

    - name: DEBUG parents
      debug:
        msg: "{{ parents }}"

    - name: "Fail this playbook if a parent node failed"
      debug:
        msg: "Parent workflow node '{{ item.summary_fields.job.name }}' ({{ item.id }}) failed"
      when: "item.summary_fields.job.status == 'failed'"
      loop: "{{ parents.ansible_facts.tower_settings }}"

    # Exclusive OR (XOR) bol(a) != bol(b)   
    - name: Generate Boolean for XOR
      set_fact:
        - my_boolean: data[0].summary_fields.job.status != data[1].summary_fields.job.status
      when: len is "2"
      vars:
        data: parents.ansible_facts.tower_settings
        len: "{{ data | length }}"  

    - name: "Fail this playbook if a parent node failed"
      fail:
        msg: "Parent workflow nodes status is not the same (XOR)"
      when: "{{ my_boolean }}"

    - name: Example using fail and when together
      fail:
        msg: This task has been marked to fail
      when: to_fail